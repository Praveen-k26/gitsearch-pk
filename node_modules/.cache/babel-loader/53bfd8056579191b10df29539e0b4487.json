{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/praveenkoru/Downloads/Koru/practice/gitsearch-pk/src/index.js\";\nimport React, { useState } from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport { ApolloProvider } from 'react-apollo';\nimport { ApolloProvider as ApolloHookProvider } from 'react-apollo-hooks';\nimport { createHttpLink } from 'apollo-link-http';\nimport { InMemoryCache } from 'apollo-cache-inmemory';\nimport ApolloClient from 'apollo-boost';\nimport { ErrorBoundary } from 'react-error-boundary';\nimport ErrorHandling from \"./errorHandling/errorHandling\";\nimport ThemeContext, { themes } from \"./context/ThemeContext\";\nconst httpLink = createHttpLink({\n  uri: 'https://api.github.com/graphql'\n});\nconst cache = new InMemoryCache();\nconst client = new ApolloClient({\n  // link: httpLink,\n  uri: 'https://api.github.com/graphql',\n  cache,\n  headers: {\n    Accept: \"application/json\",\n    Authorization: `token 3f2688fc693c1d694260a68cba723bc99a187790`,\n    // Authorization: `token 1c27da9ed2f9d64086bb67c9b3c17f0207d2b5c9`,\n    // Authorization: `token f1ce8aa4d0eaa23b2b4bc076cd72200a51453ad4`,\n    // Authorization:`token ${process.env.REACT_APP_GITHUB_TOKEN}`,\n    'content-type': 'application/json'\n  }\n}); // client.query({\n//     query: gql `\n// {\n//   user(login: Praveen-k26) {\n//     repositories(last: 100, isLocked: false) {\n//       totalCount\n//       nodes {\n//         createdAt\n//         description\n//         name\n//         url\n//         viewerPermission\n//         id\n//       }\n//     }\n//   }\n// }\n//     `\n// }).then(res => console.log(res));\n// const client = new ApolloClient({\n//     uri: 'https://api.github.com/graphql',\n//     request: async operation => {\n//         operation.setContext ({\n//             headers: {\n//                 Authorization: `token a34d779bed56ef8df59898da1e1623767e165906`,\n//                 // Authorization: `token ${process.env.REACT_APP_GITHUB_TOKEN }`,\n//                 'content-type': 'application/json',\n//\n//             }\n//         });\n//     }\n// })\n// const REPOS_QUERY = gql`\n//   query repoQuery($after: String) {\n//     viewer {\n//       repositories(first: 5, isFork: true, after: $after) {\n//         edges {\n//           node {\n//             id\n//             name\n//           }\n//         }\n//         pageInfo {\n//           endCursor\n//         }\n//       }\n//     }\n//   }\n// `;\n//\n// const REPO_SEARCH =\n//     gql`\n// query ($userId: String!){\n//   user(login: $userId) {\n//     repositories(last: 100, isLocked: false) {\n//       totalCount\n//       nodes {\n//         createdAt\n//         description\n//         name\n//         url\n//         viewerPermission\n//         id\n//       }\n//     }\n//   }\n// }\n// `\n//\n// const [value, setValue] = useState(false);\n\nReactDOM.render( /*#__PURE__*/_jsxDEV(ApolloProvider, {\n  client: client,\n  children: /*#__PURE__*/_jsxDEV(ThemeContext.Provider, {\n    value: themes.dark,\n    children: /*#__PURE__*/_jsxDEV(ErrorBoundary, {\n      fallbackComponent: ErrorHandling,\n      children: /*#__PURE__*/_jsxDEV(App, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 117,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 116,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 115,\n    columnNumber: 9\n  }, this)\n}, void 0, false, {\n  fileName: _jsxFileName,\n  lineNumber: 113,\n  columnNumber: 5\n}, this), document.getElementById('root')); // If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n\nreportWebVitals();","map":{"version":3,"sources":["/Users/praveenkoru/Downloads/Koru/practice/gitsearch-pk/src/index.js"],"names":["React","useState","ReactDOM","App","reportWebVitals","ApolloProvider","ApolloHookProvider","createHttpLink","InMemoryCache","ApolloClient","ErrorBoundary","ErrorHandling","ThemeContext","themes","httpLink","uri","cache","client","headers","Accept","Authorization","render","dark","document","getElementById"],"mappings":";;AAAA,OAAOA,KAAP,IAAeC,QAAf,QAA8B,OAA9B;AACA,OAAOC,QAAP,MAAqB,WAArB;AACA,OAAO,aAAP;AACA,OAAOC,GAAP,MAAgB,OAAhB;AACA,OAAOC,eAAP,MAA4B,mBAA5B;AACA,SAAQC,cAAR,QAA6B,cAA7B;AACA,SAAQA,cAAc,IAAIC,kBAA1B,QAAmD,oBAAnD;AACA,SAAQC,cAAR,QAA6B,kBAA7B;AACA,SAAQC,aAAR,QAA4B,uBAA5B;AACA,OAAOC,YAAP,MAAyB,cAAzB;AACA,SAAQC,aAAR,QAA4B,sBAA5B;AACA,OAAOC,aAAP,MAA0B,+BAA1B;AACA,OAAOC,YAAP,IAAsBC,MAAtB,QAAmC,wBAAnC;AAIA,MAAMC,QAAQ,GAAGP,cAAc,CAAC;AAC5BQ,EAAAA,GAAG,EAAE;AADuB,CAAD,CAA/B;AAIA,MAAMC,KAAK,GAAG,IAAIR,aAAJ,EAAd;AACA,MAAMS,MAAM,GAAG,IAAIR,YAAJ,CAAiB;AAC5B;AACAM,EAAAA,GAAG,EAAE,gCAFuB;AAG5BC,EAAAA,KAH4B;AAI5BE,EAAAA,OAAO,EAAE;AACLC,IAAAA,MAAM,EAAE,kBADH;AAELC,IAAAA,aAAa,EAAG,gDAFX;AAGL;AACA;AACA;AACA,oBAAgB;AANX;AAJmB,CAAjB,CAAf,C,CAcA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGAlB,QAAQ,CAACmB,MAAT,eACI,QAAC,cAAD;AAAgB,EAAA,MAAM,EAAEJ,MAAxB;AAAA,yBAEI,QAAC,YAAD,CAAc,QAAd;AAAuB,IAAA,KAAK,EAAEJ,MAAM,CAACS,IAArC;AAAA,2BACI,QAAC,aAAD;AAAe,MAAA,iBAAiB,EAAEX,aAAlC;AAAA,6BACI,QAAC,GAAD;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA;AAFJ;AAAA;AAAA;AAAA;AAAA,QADJ,EAUIY,QAAQ,CAACC,cAAT,CAAwB,MAAxB,CAVJ,E,CAaA;AACA;AACA;;AACApB,eAAe","sourcesContent":["import React, {useState} from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport {ApolloProvider} from 'react-apollo';\nimport {ApolloProvider as ApolloHookProvider} from 'react-apollo-hooks';\nimport {createHttpLink} from 'apollo-link-http';\nimport {InMemoryCache} from 'apollo-cache-inmemory';\nimport ApolloClient from 'apollo-boost';\nimport {ErrorBoundary} from 'react-error-boundary';\nimport ErrorHandling from \"./errorHandling/errorHandling\";\nimport ThemeContext, {themes} from \"./context/ThemeContext\";\n\n\n\nconst httpLink = createHttpLink({\n    uri: 'https://api.github.com/graphql',\n});\n\nconst cache = new InMemoryCache();\nconst client = new ApolloClient({\n    // link: httpLink,\n    uri: 'https://api.github.com/graphql',\n    cache,\n    headers: {\n        Accept: \"application/json\",\n        Authorization: `token 3f2688fc693c1d694260a68cba723bc99a187790`,\n        // Authorization: `token 1c27da9ed2f9d64086bb67c9b3c17f0207d2b5c9`,\n        // Authorization: `token f1ce8aa4d0eaa23b2b4bc076cd72200a51453ad4`,\n        // Authorization:`token ${process.env.REACT_APP_GITHUB_TOKEN}`,\n        'content-type': 'application/json',\n    }\n});\n\n// client.query({\n//     query: gql `\n// {\n//   user(login: Praveen-k26) {\n//     repositories(last: 100, isLocked: false) {\n//       totalCount\n//       nodes {\n//         createdAt\n//         description\n//         name\n//         url\n//         viewerPermission\n//         id\n//       }\n//     }\n//   }\n// }\n//     `\n// }).then(res => console.log(res));\n\n\n// const client = new ApolloClient({\n//     uri: 'https://api.github.com/graphql',\n//     request: async operation => {\n//         operation.setContext ({\n//             headers: {\n//                 Authorization: `token a34d779bed56ef8df59898da1e1623767e165906`,\n//                 // Authorization: `token ${process.env.REACT_APP_GITHUB_TOKEN }`,\n//                 'content-type': 'application/json',\n//\n//             }\n//         });\n//     }\n// })\n\n\n// const REPOS_QUERY = gql`\n//   query repoQuery($after: String) {\n//     viewer {\n//       repositories(first: 5, isFork: true, after: $after) {\n//         edges {\n//           node {\n//             id\n//             name\n//           }\n//         }\n//         pageInfo {\n//           endCursor\n//         }\n//       }\n//     }\n//   }\n// `;\n//\n// const REPO_SEARCH =\n//     gql`\n// query ($userId: String!){\n//   user(login: $userId) {\n//     repositories(last: 100, isLocked: false) {\n//       totalCount\n//       nodes {\n//         createdAt\n//         description\n//         name\n//         url\n//         viewerPermission\n//         id\n//       }\n//     }\n//   }\n// }\n// `\n//\n// const [value, setValue] = useState(false);\n\n\nReactDOM.render(\n    <ApolloProvider client={client}>\n        {/*<ApolloHookProvider client={client}>*/}\n        <ThemeContext.Provider value={themes.dark}>\n            <ErrorBoundary fallbackComponent={ErrorHandling}>\n                <App/>\n            </ErrorBoundary>\n        </ThemeContext.Provider>\n        {/*</ApolloHookProvider>*/}\n    </ApolloProvider>,\n    document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"]},"metadata":{},"sourceType":"module"}